/*
@title: Fighing Engine
@author: James Lian
@tags: ['fighting', 'multiplayer', '2player']
@addedOn: 2024-07-08

A simple 2-player fighting game engine, a little like rock'em sock'em robots and Street Fighter.
Dodge your oponents by moving left and right! Punch them to knock them out!
Use 'hadouken' to attack them from afar! Block 'hadouken' by guarding!
Win at all costs!

Player 1: 
- left: A
- right: D
- punch: W
- hadouken: S
- if you see a hadouken coming towards you, press W to deflect

Player 2:
- left: J
- right: L
- punch: I
- hadouken: K
- if you see a hadouken coming towards you, press I to deflect
*/

const p1_health = "v";
const p2_health = "y";

const p1 = "d";
const p1punch = "f"
const p1guard = "s";
const p1hadouken = "w";
const p1hurt = "q";
const p2 = "j";
const p2punch = "h"
const p2guard = "k";
const p2hadouken = "i";
const p2hurt = "p";
const ground = 'g';
const hadouken_p1 = "z"
const hadouken_impact_p1 = 'x';
const hadouken_p1_deflected = "c"
const hadouken_impact_p1_deflected = 'r';
const hadouken_p2 = "m"
const hadouken_impact_p2 = 'n';
const hadouken_p2_deflected = "b"
const hadouken_impact_p2_deflected = 't';

setLegend(
  [ p1_health, bitmap`
................
................
................
................
................
................
................
................
................
................
................
................
................
3333333333333333
3333333333333333
................`],
  [ p2_health, bitmap`
................
................
................
................
................
................
................
................
................
................
................
................
................
5555555555555555
5555555555555555
................`],
  [ p1, bitmap`
.......11.......
......111.......
......111.......
......L11.......
....1LLLL1......
...11LLLL11.....
...1133LL11.....
...1333LLL1.....
...133LL331.....
.....LLL333.....
....000000......
....00..00......
...000..00......
...00...000.....
...00....00.....
..111....11.....` ],
  [ p1punch, bitmap`
.......11.......
......111.......
......111.......
......L11.......
....1LLLL11.....
...11LLLL1111333
...1133LL1111333
...1333LLL....33
...133LLLL......
.....LLLLL......
....000000......
....00..00......
...000..000.....
...00....00.....
...00....00.....
..111....11.....` ],
  [ p1guard, bitmap`
................
................
........11......
.......111......
.......111...3..
.....11L11..33..
....11LLLL1.33..
....11L33L1113..
....11333L1111..
.....1333L.11...
.....LLL000.....
.....000000.....
.....00..00.....
....000..00.....
..10000..10.....
..111....111....`],
  [ p1hadouken, bitmap`
.......11.......
......111.......
......111.......
......L11.....33
.....L11L1..133.
.....L11111113..
.....LL11111133.
....LLLLL.....33
....LLLLL.......
....LLLL........
....000000......
....00..000.....
...000...00.....
..00.....00.....
.100.....10.....
.11......111....`],
  [ p1hurt, bitmap`
..11............
.111............
.111............
.111............
.LLLLL..........
.111LL1.........
.11111133.......
..L1111333......
..LLLLL133......
..000000........
..000.000.......
...00..000......
...00...00......
...00...10......
...10...11......
...11...........` ],
  [ p2, bitmap`
.......11.......
.......111......
.......111......
.......11L......
......1LLLL1....
.....11LLLL11...
.....11LL5511...
.....1LLL5551...
.....155LL551...
.....555LLL.....
......000000....
......00..00....
......00..000...
.....000...00...
.....00....00...
.....11....111..`],
  [ p2punch, bitmap`
.......11.......
.......111......
.......111......
.......11L......
.....11LLLL1....
5551111LLLL11...
5551111LL5511...
55....LLL5551...
......LLLL551...
......LLLLL.....
......000000....
......00..00....
.....000..000...
.....00....00...
.....00....00...
.....11....111..` ],
  [ p2guard, bitmap`
................
................
......11........
......111.......
..5...111.......
..55..11L11.....
..55.1LLLL11....
..5111L55L11....
..1111L55511....
...11.L5551.....
.....000LLL.....
.....000000.....
.....00..00.....
.....00..000....
.....01..00001..
....111....111..`],
  [ p2hadouken, bitmap`
.......11.......
.......111......
.......111......
55.....11L......
.551..1L11L.....
..51111111L.....
.55111111LL.....
55.....LLLLL....
.......LLLLL....
........LLLL....
......000000....
.....000..00....
.....00...000...
.....00.....00..
.....01.....001.
....111......11.`],
  [ p2hurt, bitmap`
............11..
............111.
............111.
............111.
..........LLLLL.
.........1LL111.
.......55111111.
......5551111L..
......551LLLLL..
........000000..
.......000.000..
......000..00...
......00...00...
......01...00...
......11...01...
...........11...` ],
  [ ground, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`],
  
  [ hadouken_p1, bitmap`
................
................
.......3333.....
.....3388833....
....3388..83....
.....83....8....
....3388..83....
.....3388833....
.......3333.....
................
................
................
................
................
................
................`],
  [ hadouken_impact_p1, bitmap`
................
................
.........3......
.....3..38.8....
.......33.3.....
......3.88.3....
.......3.33.....
........83......
......8.3..3....
................
................
................
................
................
................
................`],
  [ hadouken_p1_deflected, bitmap`
................
................
.....3333.......
....3388833.....
....38..8833....
....8....38.....
....38..8833....
....3388833.....
.....3333.......
................
................
................
................
................
................
................`],
  [ hadouken_impact_p1_deflected, bitmap`
................
................
......3.........
....8.83..3.....
.....3.33.......
....3.88.3......
.....33.3.......
......38........
....3..3.8......
................
................
................
................
................
................
................`],
  [ hadouken_p2, bitmap`
................
................
.......5555.....
.....5577755....
....5577..75....
.....75....7....
....5577..75....
.....5577755....
.......5555.....
................
................
................
................
................
................
................`],
  [ hadouken_impact_p2, bitmap`
................
................
.........5......
.....5..57.7....
.......55.5.....
......5.77.5....
.......5.55.....
........75......
......7.5..5....
................
................
................
................
................
................
................`],
  [ hadouken_p2_deflected, bitmap`
................
................
.....5555.......
....5577755.....
....57..7755....
....7....57.....
....57..7755....
....5577755.....
.....5555.......
................
................
................
................
................
................
................`],
  [ hadouken_impact_p2_deflected, bitmap`
................
................
......5.........
....7.75..5.....
.....5.55.......
....5.77.5......
.....55.5.......
......57........
....5..5.7......
................
................
................
................
................
................
................`],
);

setSolids([p1, p1punch, p1guard, p1hadouken, p1hurt, p2, p2punch, p2guard, p2hadouken, p2hurt, ground])

let level = 0
const levels = [
  map`
vvv........yyy
..............
..............
..............
..............
....d....j....
gggggggggggggg
gggggggggggggg`
]

var y = 5

// player 1 variables
var p1_x = 4
// states: d --> disabled, i --> idle, m --> move, h --> hurt, a --> attacking
var p1State = "d"

// player 2 variables
var p2_x = 9
var p2State = "d"

setMap(levels[level])

function init() {
  p1State = "i";
  p2State = "i";
  addText("FIGHT!", {
    x: 7,
    y: 3,
    color: color`0`
  });
}

function countdown() {
  addText(String(3), {
    x: 9,
    y: 3,
    color: color`0`
  });
  for (let i=2; i > 0; i--) {
    setTimeout(() => {
      clearText();
    }, 1000*(3-i)-500);
    setTimeout(() => {
      addText(String(i), {
        x: 9,
        y: 3,
        color: color`0`
      });
    }, 1000*(3-i));
  }
  setTimeout(() => {
    clearText()
  }, 2500);
  setTimeout(() => {
    init()
  }, 3000);
}

countdown()

async function p1Projectile(right=true) {
  if (right) {
    
  }
}

// P1: move right
onInput("d", () => {
  if (p1State == "i") {
    getFirst(p1).x += 1
    // if p1 is not in front of p2
    if (p1_x < p2_x - 1) {
      p1_x += 1
    }
  }
});

// P1: move left
onInput("a", () => {
  if (p1State == "i") {
    getFirst(p1).x -= 1
    // if p1 is within game boundaries
    if (p1_x != 0) {
      p1_x -= 1
    }
  }
});

// P1: punch
onInput("w", () => {
  if (p1State == "i") {
    p1State = "a"
    getFirst(p1).type = p1punch
    setTimeout(() => {
      getFirst(p1punch).type = p1
      p1State = "i"
    }, 200);
  }
});

// P1: hadouken
onInput("s", () => {
  if (p1State == "i") {
    p1State = "a"
    getFirst(p1).type = p1hadouken
    setTimeout(() => {
      getFirst(p1hadouken).type = p1
      p1State = "i"
    }, 480);
  }
});

// P2 inputs
onInput("j", () => {
  getFirst(p2).x -= 1
})
onInput("l", () => {
  getFirst(p2).x += 1
})

afterInput(() => {
  
})